from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove

from core.infrastructure.services import DialogService

from aiogram.fsm.context import FSMContext
from .states import DialogStates
from keyboards import get_dialog_keyboard, get_apeals_keyboard

from filters import IsAdmin

message_router = Router()


@message_router.message(Command("startdialog"))
async def start_dialog_command(
    message: Message, state: FSMContext, dialog_service: DialogService
) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        admin_id = await dialog_service.get_admin_id_for_dialog()
        dialog = await dialog_service.create_dialog(
            dialog_id=message.chat.id, user1_id=message.from_user.id, user2_id=admin_id
        )

        await state.update_data(dialog_id=dialog.id)
        await state.set_state(DialogStates.waiting_for_message)

        await message.answer(
            "üí¨ –í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=get_dialog_keyboard(),
        )
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@message_router.message(
    DialogStates.waiting_for_message, F.text == "üìù –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
)
async def end_dialog_handler(
    message: Message, state: FSMContext, dialog_service: DialogService
) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    data = await state.get_data()
    dialog_id = data.get("dialog_id")

    if dialog_id:
        pass

    await message.answer(
        "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!", reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()


@message_router.message(
    DialogStates.waiting_for_message, F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
)
async def show_history_handler(
    message: Message, state: FSMContext, dialog_service: DialogService
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    data = await state.get_data()
    dialog_id = data.get("dialog_id")

    if not dialog_id:
        await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        messages = await dialog_service.get_messages_for_user_in_dialog(
            dialog_id=dialog_id, user_id=message.from_user.id
        )

        if not messages:
            await message.answer("üì≠ –í –¥–∏–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return

        history = "\n\n".join(
            f"{'–í—ã' if msg.sender_id == message.from_user.id else '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'}: {msg.content}"
            for msg in messages
        )

        await message.answer(
            f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n{history}", reply_markup=get_dialog_keyboard()
        )
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")


@message_router.message(DialogStates.waiting_for_message)
async def process_user_message(
    message: Message, state: FSMContext, dialog_service: DialogService
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    dialog_id = data.get("dialog_id")

    if not dialog_id:
        await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    try:
        await dialog_service.create_message(
            message_id=message.message_id,
            dialog_id=dialog_id,
            sender_id=message.from_user.id,
            content=message.text,
        )

        await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n"
            + "–ï—Å–ª–∏ –µ—Å—Ç—å, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å ‚úçÔ∏è –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=get_dialog_keyboard(),
        )

        await state.set_state(DialogStates.waiting_for_message)
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@message_router.message(Command("showapeals"), IsAdmin())
async def show_appeals(message: Message, state: FSMContext, dialog_service: DialogService):
    try:
        not_read_dialogs = await dialog_service.not_read_dialogs(message.from_user.id)
        keyboard = get_apeals_keyboard(not_read_dialogs)
        await message.answer("–í—Å–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", reply_markup=keyboard)

    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
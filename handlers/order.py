from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    Message,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.infrastructure.services import OrderService, ShopCardService
from core.internal.enums import OrderStatus
from core.internal.models import OrderCreate
from filters import TextFilter
from logger import LoggerBuilder
from states import OrderConfirm

logger = LoggerBuilder("OrderRouter").add_stream_handler().build()

order_router = Router()


@order_router.callback_query(F.data == "order_confirm")
async def start_order_process(
    callback: CallbackQuery, state: FSMContext, shop_card_service: ShopCardService
):
    try:
        cart_data = await shop_card_service.get_card_total(callback.from_user.id)

        if not cart_data.items_count:
            await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return

        await state.set_data(
            {
                "cart_contents": cart_data.items,
                "total_price": cart_data.total_price,
            }
        )

        await state.set_state(OrderConfirm.waiting_for_order_note)

        await callback.message.answer(
            f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É: {cart_data.total_price} ‚ÇΩ\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ):\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            reply_markup=ReplyKeyboardRemove(),
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Order confirmation error: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        await state.clear()


@order_router.message(
    OrderConfirm.waiting_for_order_note, ~TextFilter(equals="skip", ignore_case=True)
)
async def process_order_note(message: Message, state: FSMContext):
    try:
        if message.text != "/skip":
            await state.update_data(order_note=message.text)

        await state.set_state(OrderConfirm.waiting_for_address_delivery)
        await message.answer(
            "üè† –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n(–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É)",
            reply_markup=ReplyKeyboardRemove(),
        )
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        await state.clear()


@order_router.message(
    OrderConfirm.waiting_for_order_note, TextFilter(equals="skip", ignore_case=True)
)
async def skip_order_note(message: Message, state: FSMContext):
    await state.update_data(order_note=None)
    await state.set_state(OrderConfirm.waiting_for_address_delivery)
    await message.answer(
        "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardRemove()
    )


@order_router.message(OrderConfirm.waiting_for_address_delivery)
async def process_delivery_address(
    message: Message,
    state: FSMContext,
):
    try:
        state_data = await state.get_data()
        address = message.text.strip()

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="final_confirm")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")

        items_text = "\n".join(
            f"{item.name} - {item.quantity} √ó {item.price} $"
            for item in state_data["cart_contents"]
        )

        await message.answer(
            f"üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
            f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
            f"üí≥ –ò—Ç–æ–≥–æ: {state_data['total_price']} $\n\n"
            f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {state_data.get('order_note', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
            reply_markup=builder.as_markup(),
        )

    except Exception as e:
        logger.error(f"Order confirmation error: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞")
        await state.clear()


@order_router.callback_query(F.data == "final_confirm")
async def final_order_confirmation(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService,
    shop_card_service: ShopCardService,
):
    try:
        state_data = await state.get_data()
        card_contents_total = await shop_card_service.get_card_total(
            callback.from_user.id
        )

        order = await order_service.create_order(
            OrderCreate(
                user_id=callback.from_user.id,
                total_count=card_contents_total.items_count,
                total_price=card_contents_total.total_price,
                status=OrderStatus.PENDING.value,
                products=[card_item.product for card_item in card_contents_total.items],
                delivery_address=state_data.get("delivery_address"),
                order_note=state_data.get("order_note"),
            )
        )

        if order:
            await shop_card_service.clear_card(callback.from_user.id)

        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
            f"–°—É–º–º–∞: {order.total_price} $\n"
            f"–ê–¥—Ä–µ—Å: {order.delivery_address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )

        await state.clear()

    except Exception:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        await state.clear()


@order_router.callback_query(F.data == "order_cancel")
async def cancel_order_process(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫."
    )


@order_router.message(Command("myorders"))
async def show_user_orders(message: Message, order_service: OrderService):
    orders = await order_service.get_user_orders(message.from_user.id)

    if not orders:
        await message.answer("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return

    response = ["üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:"]
    for order in orders:
        response.append(
            f"üÜî #{order.id} - {order.status.value}\n"
            f"üí≥ {order.total_price} ‚ÇΩ - {order.created_at.strftime('%d.%m.%Y')}\n"
            f"üè† {order.delivery_address or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )

    await message.answer("\n\n".join(response))
